// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/services.go
//
// Generated by this command:
//
//	mockgen -source=internal/services/services.go -destination=internal/services/mocks/mock_services.go
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/manyu/job-scheduler/internal/models"
	v9 "github.com/redis/go-redis/v9"
	gomock "go.uber.org/mock/gomock"
)

// MockSchedulerServiceInterface is a mock of SchedulerServiceInterface interface.
type MockSchedulerServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockSchedulerServiceInterfaceMockRecorder is the mock recorder for MockSchedulerServiceInterface.
type MockSchedulerServiceInterfaceMockRecorder struct {
	mock *MockSchedulerServiceInterface
}

// NewMockSchedulerServiceInterface creates a new mock instance.
func NewMockSchedulerServiceInterface(ctrl *gomock.Controller) *MockSchedulerServiceInterface {
	mock := &MockSchedulerServiceInterface{ctrl: ctrl}
	mock.recorder = &MockSchedulerServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchedulerServiceInterface) EXPECT() *MockSchedulerServiceInterfaceMockRecorder {
	return m.recorder
}

// GetQueueStats mocks base method.
func (m *MockSchedulerServiceInterface) GetQueueStats() (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueueStats")
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueueStats indicates an expected call of GetQueueStats.
func (mr *MockSchedulerServiceInterfaceMockRecorder) GetQueueStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueueStats", reflect.TypeOf((*MockSchedulerServiceInterface)(nil).GetQueueStats))
}

// HandleJobCompletion mocks base method.
func (m *MockSchedulerServiceInterface) HandleJobCompletion(jobID uint, success bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleJobCompletion", jobID, success)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleJobCompletion indicates an expected call of HandleJobCompletion.
func (mr *MockSchedulerServiceInterfaceMockRecorder) HandleJobCompletion(jobID, success any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleJobCompletion", reflect.TypeOf((*MockSchedulerServiceInterface)(nil).HandleJobCompletion), jobID, success)
}

// ProcessReadyJobs mocks base method.
func (m *MockSchedulerServiceInterface) ProcessReadyJobs(ctx context.Context, limit int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessReadyJobs", ctx, limit)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessReadyJobs indicates an expected call of ProcessReadyJobs.
func (mr *MockSchedulerServiceInterfaceMockRecorder) ProcessReadyJobs(ctx, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessReadyJobs", reflect.TypeOf((*MockSchedulerServiceInterface)(nil).ProcessReadyJobs), ctx, limit)
}

// MockJobQueueServiceInterface is a mock of JobQueueServiceInterface interface.
type MockJobQueueServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockJobQueueServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockJobQueueServiceInterfaceMockRecorder is the mock recorder for MockJobQueueServiceInterface.
type MockJobQueueServiceInterfaceMockRecorder struct {
	mock *MockJobQueueServiceInterface
}

// NewMockJobQueueServiceInterface creates a new mock instance.
func NewMockJobQueueServiceInterface(ctrl *gomock.Controller) *MockJobQueueServiceInterface {
	mock := &MockJobQueueServiceInterface{ctrl: ctrl}
	mock.recorder = &MockJobQueueServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobQueueServiceInterface) EXPECT() *MockJobQueueServiceInterfaceMockRecorder {
	return m.recorder
}

// CompleteJob mocks base method.
func (m *MockJobQueueServiceInterface) CompleteJob(jobID string, result *models.QueueJobResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteJob", jobID, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteJob indicates an expected call of CompleteJob.
func (mr *MockJobQueueServiceInterfaceMockRecorder) CompleteJob(jobID, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteJob", reflect.TypeOf((*MockJobQueueServiceInterface)(nil).CompleteJob), jobID, result)
}

// DequeueJob mocks base method.
func (m *MockJobQueueServiceInterface) DequeueJob(timeout time.Duration) (*models.QueueJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DequeueJob", timeout)
	ret0, _ := ret[0].(*models.QueueJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DequeueJob indicates an expected call of DequeueJob.
func (mr *MockJobQueueServiceInterfaceMockRecorder) DequeueJob(timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DequeueJob", reflect.TypeOf((*MockJobQueueServiceInterface)(nil).DequeueJob), timeout)
}

// EnqueueJob mocks base method.
func (m *MockJobQueueServiceInterface) EnqueueJob(job *models.QueueJob) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnqueueJob", job)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnqueueJob indicates an expected call of EnqueueJob.
func (mr *MockJobQueueServiceInterfaceMockRecorder) EnqueueJob(job any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueJob", reflect.TypeOf((*MockJobQueueServiceInterface)(nil).EnqueueJob), job)
}

// GetQueueStats mocks base method.
func (m *MockJobQueueServiceInterface) GetQueueStats() (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueueStats")
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueueStats indicates an expected call of GetQueueStats.
func (mr *MockJobQueueServiceInterfaceMockRecorder) GetQueueStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueueStats", reflect.TypeOf((*MockJobQueueServiceInterface)(nil).GetQueueStats))
}

// ProcessRetryQueue mocks base method.
func (m *MockJobQueueServiceInterface) ProcessRetryQueue() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessRetryQueue")
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessRetryQueue indicates an expected call of ProcessRetryQueue.
func (mr *MockJobQueueServiceInterfaceMockRecorder) ProcessRetryQueue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessRetryQueue", reflect.TypeOf((*MockJobQueueServiceInterface)(nil).ProcessRetryQueue))
}

// MockRedisClientInterface is a mock of RedisClientInterface interface.
type MockRedisClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRedisClientInterfaceMockRecorder
	isgomock struct{}
}

// MockRedisClientInterfaceMockRecorder is the mock recorder for MockRedisClientInterface.
type MockRedisClientInterfaceMockRecorder struct {
	mock *MockRedisClientInterface
}

// NewMockRedisClientInterface creates a new mock instance.
func NewMockRedisClientInterface(ctrl *gomock.Controller) *MockRedisClientInterface {
	mock := &MockRedisClientInterface{ctrl: ctrl}
	mock.recorder = &MockRedisClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisClientInterface) EXPECT() *MockRedisClientInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRedisClientInterface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRedisClientInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRedisClientInterface)(nil).Close))
}

// GetClient mocks base method.
func (m *MockRedisClientInterface) GetClient() *v9.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(*v9.Client)
	return ret0
}

// GetClient indicates an expected call of GetClient.
func (mr *MockRedisClientInterfaceMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockRedisClientInterface)(nil).GetClient))
}

// GetContext mocks base method.
func (m *MockRedisClientInterface) GetContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockRedisClientInterfaceMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockRedisClientInterface)(nil).GetContext))
}

// Health mocks base method.
func (m *MockRedisClientInterface) Health() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health")
	ret0, _ := ret[0].(error)
	return ret0
}

// Health indicates an expected call of Health.
func (mr *MockRedisClientInterfaceMockRecorder) Health() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockRedisClientInterface)(nil).Health))
}
