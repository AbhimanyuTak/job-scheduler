// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/storage.go
//
// Generated by this command:
//
//	mockgen -source=internal/storage/storage.go -destination=internal/storage/mocks/mock_storage.go
//

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	reflect "reflect"
	time "time"

	models "github.com/manyu/job-scheduler/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreateJob mocks base method.
func (m *MockStorage) CreateJob(job *models.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJob", job)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateJob indicates an expected call of CreateJob.
func (mr *MockStorageMockRecorder) CreateJob(job any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*MockStorage)(nil).CreateJob), job)
}

// CreateJobExecution mocks base method.
func (m *MockStorage) CreateJobExecution(execution *models.JobExecution) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJobExecution", execution)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateJobExecution indicates an expected call of CreateJobExecution.
func (mr *MockStorageMockRecorder) CreateJobExecution(execution any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobExecution", reflect.TypeOf((*MockStorage)(nil).CreateJobExecution), execution)
}

// CreateJobSchedule mocks base method.
func (m *MockStorage) CreateJobSchedule(schedule *models.JobSchedule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJobSchedule", schedule)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateJobSchedule indicates an expected call of CreateJobSchedule.
func (mr *MockStorageMockRecorder) CreateJobSchedule(schedule any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobSchedule", reflect.TypeOf((*MockStorage)(nil).CreateJobSchedule), schedule)
}

// CreateJobWithSchedule mocks base method.
func (m *MockStorage) CreateJobWithSchedule(job *models.Job, schedule *models.JobSchedule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJobWithSchedule", job, schedule)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateJobWithSchedule indicates an expected call of CreateJobWithSchedule.
func (mr *MockStorageMockRecorder) CreateJobWithSchedule(job, schedule any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobWithSchedule", reflect.TypeOf((*MockStorage)(nil).CreateJobWithSchedule), job, schedule)
}

// DeleteJobSchedule mocks base method.
func (m *MockStorage) DeleteJobSchedule(jobID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJobSchedule", jobID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteJobSchedule indicates an expected call of DeleteJobSchedule.
func (mr *MockStorageMockRecorder) DeleteJobSchedule(jobID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobSchedule", reflect.TypeOf((*MockStorage)(nil).DeleteJobSchedule), jobID)
}

// GetAllJobs mocks base method.
func (m *MockStorage) GetAllJobs() ([]*models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllJobs")
	ret0, _ := ret[0].([]*models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllJobs indicates an expected call of GetAllJobs.
func (mr *MockStorageMockRecorder) GetAllJobs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllJobs", reflect.TypeOf((*MockStorage)(nil).GetAllJobs))
}

// GetJob mocks base method.
func (m *MockStorage) GetJob(id uint) (*models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJob", id)
	ret0, _ := ret[0].(*models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJob indicates an expected call of GetJob.
func (mr *MockStorageMockRecorder) GetJob(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJob", reflect.TypeOf((*MockStorage)(nil).GetJob), id)
}

// GetJobExecutions mocks base method.
func (m *MockStorage) GetJobExecutions(jobID uint, limit int) ([]*models.JobExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobExecutions", jobID, limit)
	ret0, _ := ret[0].([]*models.JobExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobExecutions indicates an expected call of GetJobExecutions.
func (mr *MockStorageMockRecorder) GetJobExecutions(jobID, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobExecutions", reflect.TypeOf((*MockStorage)(nil).GetJobExecutions), jobID, limit)
}

// GetJobSchedule mocks base method.
func (m *MockStorage) GetJobSchedule(jobID uint) (*models.JobSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobSchedule", jobID)
	ret0, _ := ret[0].(*models.JobSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobSchedule indicates an expected call of GetJobSchedule.
func (mr *MockStorageMockRecorder) GetJobSchedule(jobID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobSchedule", reflect.TypeOf((*MockStorage)(nil).GetJobSchedule), jobID)
}

// GetJobsReadyForExecution mocks base method.
func (m *MockStorage) GetJobsReadyForExecution(limit int) ([]*models.Job, []*models.JobSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobsReadyForExecution", limit)
	ret0, _ := ret[0].([]*models.Job)
	ret1, _ := ret[1].([]*models.JobSchedule)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetJobsReadyForExecution indicates an expected call of GetJobsReadyForExecution.
func (mr *MockStorageMockRecorder) GetJobsReadyForExecution(limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobsReadyForExecution", reflect.TypeOf((*MockStorage)(nil).GetJobsReadyForExecution), limit)
}

// UpdateJobExecution mocks base method.
func (m *MockStorage) UpdateJobExecution(execution *models.JobExecution) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobExecution", execution)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJobExecution indicates an expected call of UpdateJobExecution.
func (mr *MockStorageMockRecorder) UpdateJobExecution(execution any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobExecution", reflect.TypeOf((*MockStorage)(nil).UpdateJobExecution), execution)
}

// UpdateJobSchedule mocks base method.
func (m *MockStorage) UpdateJobSchedule(jobID uint, nextExecutionTime time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobSchedule", jobID, nextExecutionTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJobSchedule indicates an expected call of UpdateJobSchedule.
func (mr *MockStorageMockRecorder) UpdateJobSchedule(jobID, nextExecutionTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobSchedule", reflect.TypeOf((*MockStorage)(nil).UpdateJobSchedule), jobID, nextExecutionTime)
}

// GetJobExecutionInProgress mocks base method.
func (m *MockStorage) GetJobExecutionInProgress(jobID uint) (*models.JobExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobExecutionInProgress", jobID)
	ret0, _ := ret[0].(*models.JobExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobExecutionInProgress indicates an expected call of GetJobExecutionInProgress.
func (mr *MockStorageMockRecorder) GetJobExecutionInProgress(jobID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobExecutionInProgress", reflect.TypeOf((*MockStorage)(nil).GetJobExecutionInProgress), jobID)
}
